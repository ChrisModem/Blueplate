/**
 * SASS File: 		_responsive-layout.scss
 * Type: 			partial
 * Author:        	Chris Humboldt
 * Last Edited:   	18 March 2014
 */


// Table of contents
// ---------------------------------------------------------------------------------------
// Variables
// Row
// Span
// Offsets
// Show / hide
// Layout
// Respond to
// Call layout classes


// Variables
// ---------------------------------------------------------------------------------------
// Responsive
$column-limit 					: 12;
$limit-width 					: 68.750em;
$break-main 					: 43.813em;
$min-max 						: false;



// Row
// ---------------------------------------------------------------------------------------
@mixin row() {
	width: 100%;

	&:before, &:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}


// Spans
// ---------------------------------------------------------------------------------------
@mixin span($span: $column-limit, $span-column-limit: $column-limit) {
	float: left;
 	position: relative;
	width: percentage($span / $column-limit);
}
@mixin new-span($span: $column-limit, $span-column-limit: $column-limit) {
	width: percentage($span / $column-limit);
}
@mixin make-span($span: $column-limit, $span-column-limit: $column-limit){
	width: percentage($span / $column-limit);
}
@mixin reset-span() {
	@include span(12);
	@include offset(0);
	@include offset-r(0);
}


// Offsets
// ---------------------------------------------------------------------------------------
@mixin offset($off-by, $span-column-limit: $column-limit) {
	margin-left: percentage($off-by / $column-limit);
}
@mixin offset-r($off-by, $span-column-limit: $column-limit) {
	margin-right: percentage($off-by / $column-limit);
}


// Show / hide
// ---------------------------------------------------------------------------------------
@mixin hide() {
	display: none;
}
@mixin show($type: block) {
	display: $type;
}


// Layout
// ---------------------------------------------------------------------------------------
@mixin center() {
	margin: 0px auto;
}
@mixin limit() {
	width: $limit-width;
	margin: 0px auto;

	@media screen and (max-width: $limit-width) 
	{
		width: 100%;
	}
}


// Respond to
// ---------------------------------------------------------------------------------------
@mixin respond-to($breakpoint, $breakpoint-type: false, $orientation: false){

	// Retina breakpoint
	@if $breakpoint == retina {
		@media screen and (-webkit-min-device-pixel-ratio: 1.75), (min-resolution: 168dpi) { 
			@content; 
		}
	}
	// Layout responding
	@else {
		// Min max
		@if $breakpoint-type == false {

			// Large
			@if $breakpoint == small {
				$min-max 				: max-width;
			}
			@else if $breakpoint == fluid {
				$min-max 				: max-width;
			}
			@else {
				$min-max 				: min-width;
			}
		}
		@else {
			@if $breakpoint-type == max {
				$min-max 				: max-width;
			}
			@else {
				$min-max 				: min-width;
			}
		}

		// Breakpoint
		@if $breakpoint == large {
			$breakpoint					: $break-main;
		}
		@else if $breakpoint == fluid {
			$breakpoint 				: $limit-width;	
		}
		@else if $breakpoint == small {
			$breakpoint 				: $break-main;
		}

		// Return (check orientation)
		@if $orientation != false {
			@media only screen and ($min-max: $breakpoint) and (orientation : $orientation) { 
				@content; 
			} 
		}
		@else {
			@media only screen and ($min-max: $breakpoint) { 
				@content; 
			}
		}
	}
}


// Call layout classes
// ---------------------------------------------------------------------------------------
@mixin blueplate-layout() {

	// Row
	.row {
		@include row();

		.row {
			width: auto;
		}
		[class *= "span-"] {
			float: left;
			position: relative;
		}

		// Span loop
		@for $index from 1 through $column-limit {
			.span-#{$index} {
				@include make-span($index);
			}
		}

		// Offset loop
		@for $index from 1 through ($column-limit - 1) {
			.offset-#{$index} {
				@include offset($index);
			}
			.offset-r-#{$index} {
				@include offset-r($index);
			}
		}
	}

	// Limit
	.limit {
		@include limit();
	}

	// Respond large
	@include respond-to(large) {
		.row {

			// Large span loop
			@for $index from 1 through $column-limit {
				.large-span-#{$index} {
					@include make-span($index);
				}
			}

			// Offset loop
			@for $index from 1 through ($column-limit - 1) {
				.large-offset-#{$index} {
					@include offset($index);
				}
				.large-offset-r-#{$index} {
					@include offset-r($index);
				}
			}
		}
	}

	// Respond small
	@include respond-to(small) {
		.row {
			
			// Small span loop
			@for $index from 1 through $column-limit {
				.small-span-#{$index} {
					@include make-span($index);
				}
			}

			// Offset loop
			@for $index from 1 through ($column-limit - 1) {
				.small-offset-#{$index} {
					@include offset($index);
				}
				.small-offset-r-#{$index} {
					@include offset-r($index);
				}
			}
		}
	}
}